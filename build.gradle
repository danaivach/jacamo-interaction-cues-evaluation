/*
   Templete JaCaMo Project
*/

defaultTasks 'runEvalScalability'

apply plugin: 'java'
apply plugin: 'maven-publish'
apply from: '.jcm-deps.gradle' // this file contains dependencies declared in the .jcm files

version '1.0'
group   'org.jacamo'

repositories {
    maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
    maven { url "https://repo.gradle.org/gradle/libs-releases" }

    //flatDir { dirs 'lib' }

    mavenCentral()
    maven { url "https://jitpack.io" }

}

dependencies {
    implementation('com.github.danaivach:jacamo:refactor-event-filters-SNAPSHOT')
    //implementation('org.jacamo:jacamo:1.2.3')
    implementation('com.github.danaivach:jacamo-hypermedia:hmas-signifiers-SNAPSHOT') {
       // exclude group: 'org.slf4j', module: 'slf4j-reload4j'   // Exclude log4j binding and reload4j
    }
    implementation('com.github.danaivach:hmas-java:main-SNAPSHOT')
    implementation 'com.github.Interactions-HSG:wot-td-java:master-SNAPSHOT'
    implementation('org.apache.httpcomponents.client5:httpclient5-fluent:5.0')
    implementation('org.apache.httpcomponents.core5:httpcore5:5.2.5')

    // Jetty dependencies
    implementation('org.eclipse.jetty.aggregate:jetty-all:9.0.0.RC2')

    implementation('org.eclipse.rdf4j:rdf4j-model:5.0.2')
    implementation('org.eclipse.rdf4j:rdf4j-rio-api:5.0.2')
    implementation('org.eclipse.rdf4j:rdf4j-rio-turtle:5.0.2')

    // Apache POI
    implementation('org.apache.poi:poi:5.3.0')
    implementation('org.apache.poi:poi-ooxml:5.3.0')
}



sourceSets {
    main {
        java {
            srcDir 'src/env'
            srcDir 'src/agt'
            srcDir 'src/org'
            srcDir 'src/int'
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

task runEvalScalability (type: JavaExec, dependsOn: 'classes') {
    group       ' JaCaMo'
    description 'runs the JaCaMo application'
    doFirst {
        mkdir 'log'
    }
    def vocab = project.hasProperty('vocab') ? project.vocab.toString() : "hmas"
    def srm = project.hasProperty('srm') ? project.srm.toInteger() : 0
    def sem = project.hasProperty('sem') ? project.sem.toInteger() : 0
    //def dynamicPlans = project.hasProperty('dynamicPlans') ? project.dynamicPlans.toInteger() : 0
    //def dynamicAbilities = project.hasProperty('dynamicAbilities') ? project.dynamicAbilities.toInteger() : 0

    mainClass = 'jacamo.infra.JaCaMoLauncher'

    if ([srm, sem].every { it in [0, 1] }) {
        args "eval_scalability_${vocab}_${srm}${sem}.jcm"
    } else {
        throw new GradleException("Invalid combination of dynamicPlans and dynamicAbilities")
    }
    // jvmArgs '-Xss15m'
    classpath sourceSets.main.runtimeClasspath
}

task runBASEvalScalability (type: JavaExec, dependsOn: 'classes') {
    group       ' JaCaMo'
    description 'runs the JaCaMo application'
    doFirst {
        mkdir 'log'
    }
    def vocab = project.hasProperty('vocab') ? project.vocab.toString() : "hmas"
    def srm = project.hasProperty('srm') ? project.srm.toInteger() : 0
    def sem = project.hasProperty('sem') ? project.sem.toInteger() : 0
    //def dynamicPlans = project.hasProperty('dynamicPlans') ? project.dynamicPlans.toInteger() : 0
    //def dynamicAbilities = project.hasProperty('dynamicAbilities') ? project.dynamicAbilities.toInteger() : 0

    mainClass = 'jacamo.infra.JaCaMoLauncher'

    if ([srm, sem].every { it in [0, 1] }) {
        args "bas_eval_scalability_${vocab}_${srm}${sem}.jcm"
    } else {
        throw new GradleException("Invalid combination of dynamicPlans and dynamicAbilities")
    }
    // jvmArgs '-Xss15m'
    classpath sourceSets.main.runtimeClasspath
}

task buildJCMDeps (type: JavaExec, dependsOn: 'classes') {
    mainClass = 'jacamo.infra.RunJaCaMoProject'
    args = ['eval_scalability_hmas_00.jcm', '--deps']
    classpath sourceSets.main.runtimeClasspath
}

jar {
    duplicatesStrategy 'exclude'

    archiveBaseName = project.name

    from (project.projectDir.absolutePath + '/src') {
        include '**/*.asl'
        include '**/*.xml'
        include '**/*.sai'
        include '**/*.ptl'
        include '**/*.jcm'
        exclude 'test'
    }
    from (project.buildDir.absolutePath + '/classes') {
        include '**/*'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}


task uberJar(type: Jar, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'creates a single runnable jar file with all dependencies'
    duplicatesStrategy 'exclude'

    manifest {
        attributes 'Main-Class': 'jacamo.infra.JaCaMoLauncher'
    }
    archiveBaseName = 'jacamo-main' // the name must start with jacamo so that jacamo...jar is found in the classpath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from (project.projectDir.absolutePath) {
        include '**/*.asl'
        include '**/*.xml'
        include '**/*.sai'
        include '**/*.ptl'
        include '**/*.jcm'
        include '*.properties'
    }
    from (project.buildDir.absolutePath + '/jcm') {
        include '**/*'
    }
    with jar

    doFirst {
        copy {
            from 'eval_scalability_hmas_00.jcm'
            rename 'eval_scalability_hmas_00.jcm','default.jcm'
            into project.buildDir.absolutePath + '/jcm'
        }
    }
}


task testJaCaMo {
    description 'runs JaCaMo unit tests'
    def errorOnTests = false
    outputs.upToDateWhen { false } // disable cache

    doFirst {
        try {
            javaexec {
                mainClass = 'jacamo.infra.JaCaMoLauncher'
                if (gradle.startParameter.logLevel.toString().equals("DEBUG")) {
                    args = ['src/test/tests.jcm', '--log-conf', '$jason/templates/console-debug-logging.properties']
                } else if (gradle.startParameter.logLevel.toString().equals("INFO")) {
                    args = ['src/test/tests.jcm', '--log-conf', '$jason/templates/console-info-logging.properties']
                } else {
                    args = ['src/test/tests.jcm', '--log-conf', '$jason/templates/console-lifecycle-logging.properties']
                }
                classpath sourceSets.main.runtimeClasspath

                errorOutput = new ByteArrayOutputStream()
                standardOutput = new ByteArrayOutputStream()

                ext.stdout = {
                    return standardOutput.toString()
                }
                ext.errout = {
                    return errorOutput.toString()
                }
            }
        } catch (Exception e) {
            errorOnTests = true
        }
    }

    doLast {
        def styler = 'black red green yellow blue magenta cyan white'
            .split().toList().withIndex(30)
            .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }

        def std = stdout()
        std.splitEachLine('\n') { String line ->
            line = line.replace("TESTING","${styler['yellow']('TESTING')}")
            line = line.replace("PASSED","${styler['green']('PASSED')}")
            line = line.replace("FAILED","${styler['red']('FAILED')}")
            line = line.replace("TODO","${styler['magenta']('TODO')}")
            line = line.replace("LAUNCHING","${styler['blue']('LAUNCHING')}")
            println line
        }

        def err = errout()
        err.splitEachLine('\n') { String line ->
            line = line.replace("TESTING","${styler['yellow']('TESTING')}")
            line = line.replace("PASSED","${styler['green']('PASSED')}")
            line = line.replace("FAILED","${styler['red']('FAILED')}")
            line = line.replace("TODO","${styler['magenta']('TODO')}")
            line = line.replace("LAUNCHING","${styler['blue']('LAUNCHING')}")
            println line
        }

        if (errorOnTests) {
            throw new GradleException('JaCaMo unit tests: ERROR!')
        }
    }
}

clean {
    delete 'bin'
    delete 'build'
    delete 'log'
}
